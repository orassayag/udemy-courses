/*     ['UDEMY_SESSION', 'udemy-session'],
    ['SANDBOX', 'sandbox'] */

    /* 			//isAdd ? this[fieldName] += count : this[fieldName] -= count; */

 // Add this to settings.js
/*                 applicationService.applicationData.method = Method.CREATE_COURSES; */
/*                 applicationService.applicationData.method = Method.UPDATE_COURSES;
                courseService.coursesData.courseIndex = 0; */
/*                 applicationService.applicationData.method = Method.PURCHASE_COURSES;
courseService.coursesData.courseIndex = 0; */
/*             if (!applicationService.applicationData.isLogMode) { */
/*             } */

        /*         await this.logService.logCourse({
    course: course,
    isValid: course.status === CourseStatus.CREATE
}); */
/*         await this.logService.logCourse({
            course: course,
            isValid: course.status === CourseStatus.CREATE
        }); */
/*         await this.logService.logCourse({
    course: course,
    isValid: course.status === CourseStatus.CREATE
}); */
            //isValid: course.status === CourseStatus.CREATE

            /* CourseStatus, */
/* const logService = require('./log.service'); */
/*         await this.logCourses(); */
/*     async logCourses() {
        for (let i = 0; i < courseService.coursesData.coursesList.length; i++) {
            const course = courseService.coursesData.coursesList[i];
            await logService.logCourse({
                course: course,
                isValid: course.status === CourseStatus.CREATE
            });
        }
    } */

    		//debugger;
			//const { course, isValid } = data;
/* 	async logCourse(data) {
		if (!this.isLogs) {
			return;
		}
		const { course, isValid } = data;
		let path = null;
		switch (applicationService.applicationData.method) {
			case Method.CREATE_COURSES:
				path = isValid ? (this.logData.isLogCreateCoursesValid ? this.createCoursesValidPath : null) :
					(this.logData.isLogCreateCoursesInvalid ? this.createCoursesInvalidPath : null);
				break;
			case Method.UPDATE_COURSES:
				path = isValid ? (this.logData.isLogUpdateCoursesValid ? this.updateCoursesValidPath : null) :
					(this.logData.isLogUpdateCoursesInvalid ? this.updateCoursesInvalidPath : null);
				break;
			case Method.PURCHASE_COURSES:
				path = isValid ? (this.logData.isLogPurchaseCoursesValid ? this.purchaseCoursesValidPath : null) :
					(this.logData.isLogPurchaseCoursesInvalid ? this.purchaseCoursesInvalidPath : null);
				break;
		}
		if (!path) {
			return;
		}
		// Log the course.
		const message = this.createCourseTemplate({
			course: course,
			isLog: true
		});
		await fileUtils.appendFile({
			targetPath: path,
			message: message
		});
	} */

                    /*                 if (originalPrices) {
                                    course.priceNumber = originalPrices.priceNumber;
                                    course.priceDisplay = originalPrices.priceDisplay;
                                    courseService.coursesData.totalPriceNumber += originalPrices.priceNumber;
                                } */
                                                /*                 if (originalPrices) {
                                    course.priceNumber = originalPrices.priceNumber;
                                    course.priceDisplay = originalPrices.priceDisplay;
                                    courseService.coursesData.totalPriceNumber += originalPrices.priceNumber;
                                } */
                    /*                     const { priceNumber, priceDisplay } = courseUtils.getCoursePrices(courseOriginalPriceLabel);
                    course.priceNumber = priceNumber;
                    course.priceDisplay = priceDisplay;
                    courseService.coursesData.course = course; */
/*                 if (priceNumber) {
courseService.coursesData.totalPriceNumber += priceNumber;
} */
/*                 if (priceNumber) {
    courseService.coursesData.totalPriceNumber += priceNumber;
} */

        //const finalizeResult = await courseService.finalizeCreateUpdateCourses();
        //return finalizeResult;
/*         // Log the courses.
        await this.logCourses();
        if (finalizeResult) {
            return finalizeResult;
        } */
/*     async logCourses() {
        for (let i = 0; i < courseService.coursesData.coursesList.length; i++) {
            const course = courseService.coursesData.coursesList[i];
            await logService.logCourse({
                course: course,
                isValid: course.status === CourseStatus.CREATE
            });
        }
    } */

    //const { textUtils } = require('../utils');
/*     const totalPriceNumber = 30363;
    const totalPricePurchased = textUtils.getNumber2CharactersAfterDot(totalPriceNumber);
    console.log(totalPricePurchased); */

/* cSpell:disable */
/* const puppeteer = require('puppeteer');
(async () => { */
/*     const browser = await puppeteer.launch({ headless: false });
    const page = await browser.newPage();
    // Instructs the blank page to navigate a URL
    await page.goto('https://www.google.com/');

//const renderedContent = await page.evaluate(() => new XMLSerializer().serializeToString(document));

    const windowHandle = await page.evaluateHandle(() => window);
    const result = await page.evaluate(e => e, windowHandle); */

/*     var handle = await page.EvaluateExpressionHandle('({window, document})');
    var properties = await handle.GetPropertiesAsync();
    var windowHandle = properties['window'];
    var documentHandle = properties['document'];
    console.log(documentHandle); */

    /*     const jsHandle = await page.evaluateHandle(() => {
            return document.getElementsByTagName('html');
          });

          const result = await page.evaluate(e => e[0], jsHandle);
          const divs = result.querySelectorAll('div');
          console.log(divs); */

    /*     const windowHandle = await page.evaluateHandle('() => window');
        const divs = windowHandle.querySelectorAll('div');
        console.log(divs.length); */

    //await browser.close();
/* })(); */

/*     isDirectoryPath(path) {
        const stats = fs.statSync(path);
        return stats.isDirectory();
    } */

    /* if (purchaseCoursesResult) {
    return purchaseCoursesResult;
}
return null; */
/*         // Log the courses.
        await this.logCourses(); */
/*     async logCourses() {
        for (let i = 0; i < courseService.coursesData.coursesList.length; i++) {
            const course = courseService.coursesData.coursesList[i];
            await logService.logCourse({
                course: course,
                isValid: course.status === CourseStatus.PURCHASE
            });
        }
    } */

    /*         number = (Math.round(number * 100) / 100);
        number = this.getNumberWithCommas(number);
        number = number.toString().toFixed(2);
        return number; */
        //console.log(parseInt(Math.round(number * 100) / 100));
        //return this.getNumberWithCommas();
        //return number.toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        //return this.getNumberWithCommas(Math.round(number * 100) / 100).toFixed(2);
        //return this.getNumberWithCommas(43827687); */

        /*     getFullTime() {
        const date = new Date();
        return `${textUtils.addLeadingZero(date.getHours())}:${textUtils.addLeadingZero(date.getMinutes())}:${textUtils.addLeadingZero(date.getSeconds())}`;
    }

    getDateNoSpaces() {
        const date = new Date();
        return [textUtils.addLeadingZero(date.getDate()), (textUtils.addLeadingZero(date.getMonth() + 1)), date.getFullYear()].join('');
    }

    getDateNoSpacesFromString(date) {
        return date.split('/').join('');
    }

    getFullDateNoSpaces() {
        const date = new Date();
        return `${[date.getFullYear(), (textUtils.addLeadingZero(date.getMonth() + 1)), textUtils.addLeadingZero(date.getDate())].join('')}_${[textUtils.addLeadingZero(date.getHours()), textUtils.addLeadingZero(date.getMinutes()), textUtils.addLeadingZero(date.getSeconds())].join('')}`;
    }

    getCommasDate() {
        const date = new Date();
        return `${[date.getFullYear(), (textUtils.addLeadingZero(date.getMonth() + 1)), textUtils.addLeadingZero(date.getDate())].join('/')}`;
    }

    // Format yyyy-mm-dd. Example: 8 Dec , 2020.
    getDateFromString(date) {
        if (!date) {
            return date;
        }
        const split = date.split(' ');
        return `${split[3]}/${textUtils.addLeadingZero(this.shortMonths[textUtils.toLowerCase(split[1])])}/${textUtils.addLeadingZero(split[0])}`;
    }

    getFullDateTemplate(date) {
        if (!date) {
            date = new Date();
        }
        return `${[textUtils.addLeadingZero(date.getDate()), (textUtils.addLeadingZero(date.getMonth() + 1)), date.getFullYear()].join('/')} ${[textUtils.addLeadingZero(date.getHours()), textUtils.addLeadingZero(date.getMinutes()), textUtils.addLeadingZero(date.getSeconds())].join(':')}`;
    } */

    /* console.log(udemyURL);
console.log(coursesDOMList.length); */

/* const courseService = require('./course.service');
const logService = require('./log.service');
const { CourseStatus } = require('../../core/enums'); */

/* const logService = require('./log.service'); */
/* CourseStatus, */