Complete / canceled tasks:
==========================
===Second Pahse==== *
-Update packages + Recreate package-lock.json. *
-Add 'Status.VALIDATE' to the Status enum. *
-Clear unused enums and make sure all in used really exists. *
-Remove the 'destination' parameter in the 'filterDirectories' method + Verify that backup still works. *
-Due to the break changes of log-update packages, there is a need to use a postinstall script to fix the direct file: *
1. Remove the 'wrap-ansi', 'slice-ansi', 'cli-cursor', 'ansi-escapes' packages from the 'package.json' file. *
2. Delete the 'log-update' directory. *
3. Install the original 'log-update' package. *
4. Change in the 'log.utils' file to use the 'require('log-update');' syntax. *
5. Add the postinstall script, add the 'script/initiate.js' file. *
6. Add the 'INITIATE' key/value to the ScriptType enum. *
7. Add the 'postinstall' script to the 'package.json file'. *
8. Run in the terminal 'npm i' + Recreate the 'package-lock.json' file. *
9. Format the 2 files. *
10. Make sure all work as expected. *
-Rename and check: countLimitService.countLimitDataModel.millisecondsSendEmailDelayCount. *
-Take the latest settings from '.vscode/settings.json' and implement them. *
-Check and reset the '.vscode/settings.json' by 'C:/Or/Web/auto-packages-updater/auto-packages-updater/.vscode/settings.json' +
Format all documents and re-add 'cSpell.words' all the words + add the 'cSpell.ignorePaths'. *
-Change the 'SystemUtils' functions to be like the standard, take them from the empty-directories project. *
-Convert all 'new Date()' to be from the timeUtils. Change in all places. Take the updated version of the function from 'event-dates-calendar' project.
-All time logic is in place + Take the 'getCurrentDate' function from the 'event-dates-calendar' project. *
-In validation file path (probably a JSON file) there is a 'Expected a number' comment, need to fix it *
(take the comment from the auto-packages-updater project). *
-Check 'validateFields' function - The following logic needs to be fixed to be exists instead of not exists:
if (!scanFieldsResult) { *
   return scanFieldsResult; *
} *
-Convert 'removeLastCharacter' to use 'removeLastCharacters'. *
-Make sure that all places 'this.exit' function - Need to be 'await this.exit'. *
-Make sure to have space between /* cSpell:disable */ in the 'INSTRUCTIONS.md' file. *
-Make sure to fix the grammar mistake in the 'enum.utils.js' file (an enum-like object). *
-In the 'README.md' file, fix in all places to 'In the terminal'. *
-Search for 'async ' and create a list of functions/methods, and make sure that all calls have await. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-In the 'package.json' file change to 'private: false'. *
-Convert in all places from all versions of canceled keyword to 'Canceled' keyword. *
-Change in all places that globalUtils will be on top. *
-Fixed bug of not logging the course price to log TXT file. *
-Change all (where it's possible) from 'console.log' to 'logUtils.log'. *
-Add in all places 'name.model' to all models. *
-Check that in all places the name of the file includes the name of tha parent directory. For example: name.model inside 'models' directory. *
-Don't forget to do the same rename logic for all the enums in the project. *
-Change in all places the config from 'misc/backup' to 'misc/backups' directory. *
-Copy the '.eslintignore' file from the 'udemy-courses' project. *
-Make sure all switch-case have curly braces. *
-Remove code comments to a backup TXT file. *
-Remove the duplicate empty lines: \n\s*\n\s*\n *
-Remove the first empty line: ^(?<![\s])\n *
-Remove the last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Format all documents. *
-Verify all works well. *
-Fix TXT files spell mistakes via Gmail. *
-Fix TXT files spell mistakes via Gmail (Also, convert '_' to ' ' in all places when checking).
-Bring back the production environment in settings.js to true. *
-Delete all the development dist files. *
-Move all complete tasks from here to complete_tasks.txt. *
-Upload to GitHub. *
-Backup to iOmega. *
===First Pahse==== *
-The current structure of the coupon website is expired and the application no longer works. *
-The new logic will include: *
1. No more need for dates, only pages number, the latest pages numbers (30-40 pages a day). *
2. Static pages to scan, such as: https://idownloadcoupon.com/best-free-online-courses-last-24-hours/ - Canceled. *
3. All the DOM logic stays the same - Recheck it. *
4. Verify all works. *
-Update packages + Recreate package-lock.json. *
-Remove code comments to a backup TXT file. *
-Convert " to ' in the relevant places. *
-Remove all 'debugger' keywords. *
-Recheck error numbers in error_index.txt. *
-Check 'let' needs to be converted to 'const'. *
-Check places to change from simple parameters with dynamic objects to classes. *
-Make sure all comments '//' have: 1. space 2. ends with a dot.
-Make sure 'id' => 'Id', 'url' => 'URL', 'api' => 'API'. *
-Make sure spaces in all files between bottom, need to fix cases like this: *
} *
module.exports *
} *
export default *
-Change all '.length > 0' to 'isExists'. *
-Remove duplicate import/require (convert to index.js if possible). *
-Sort alphabetically all the imports/requires by https://alphabetizer.flap.tv/. *
-Sort alphabetically all the imports/requires: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils. *
-File extensions should be upper case: JSON, TXT, etc. *
-Remove the space lines inside methods and functions. *
-Remove the duplicate empty lines: \n\s*\n\s*\n *
-Remove the first empty line: ^(?<![\s])\n *
-Remove the last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Make sure all switch-case have curly braces. *
-Clear unused enums and make sure all in used really exists. *
-Search for 'async ' and create a list of functions/methods, and make sure that all calls have await. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-Change the 'INSTRUCTIONS.md' example of the console line status. *
-Change in all places the instructions - No longer dates - but pages count. *
-Do all the 'ToDo' tasks. *
-Format all documents. *
-Verify all works well. *
-Move all complete tasks from here to complete_tasks.txt. *
-Comments: Change 'validateEnumData' to 'data'. *
-Change from 'getJsonFileData' to 'getJSONFileData'. *
-Change the validation on JSON parameters to use 'Object.prototype.hasOwnProperty.call(jsonData, '')'. *
-Remove the 'await' from 'await fileUtils.createDirectory(value);'. *
-In settings.js convert utils path to index, and check if it still works. *
-Rearrange console status log: *
-Move the 'Session Number' from 'GENERAL2' to 'SETTINGS'. *
-Move the 'Is Keywords Filter' from 'GENERAL2' to 'SETTINGS'. *
-Move the 'Total Price Purchase' from 'GENERAL1' to 'GENERAL2'. *
-Rename the 'Total Price Purchase' to 'Total Purchase Price' in all places. *
-Add logic for 'Total Courses Price' (add it also to the console status log to 'GENERAL2'), *
and calculate the price regardless of the course status. *
-Verify all works well. *
-Update packages + Recreate package-lock.json. *
-Remove code comments to a backup TXT file. *
-Convert " to ' in the relevant places. *
-Remove all 'debugger' keywords. *
-Recheck error numbers in error_index.txt. *
-Check 'let' needs to be converted to 'const'. *
-Make sure all comments '//' have: 1. space 2. ends with a dot. *
-Make sure 'id' => 'Id', 'url' => 'URL', 'api' => 'API'.
-Make sure spaces in all files between bottom, need to fix cases like this: *
} *
module.exports *
} *
export default *
-Remove duplicate import/require (convert to index.js if possible). *
-Sort alphabetically all the imports/requires by https://alphabetizer.flap.tv/. *
-Sort alphabetically all the imports/requires: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils. *
-File extensions should be upper case: JSON, TXT, etc. *
-Remove duplicate empty lines: \n\s*\n\s*\n *
-Remove last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Do all the 'ToDo' tasks. *
-Format all documents. *
-Verify all works well. *
-Fix TXT files spell mistakes via Gmail. *
-Move all complete tasks from here to complete_tasks.txt. *
-Upload to GitHub. *
-Backup to iOmega. *
-Build an array of links to fetch all the Udemy courses from them directly - Canceled. *
-Change the logic according to the new structure of the new website - Canceled. *
-Remove all unneeded logic - Start - Canceled. *
-Scan the site with a number of pages (300 is the default from the settings.js) - Canceled. *
-Create courses as before with the initiative link by scanning the pages - Canceled. *
-Also, build an array of links to fetch all the Udemy courses from them - Canceled. *
-Remove all unneeded logic - End - Canceled. *
17. Accounts re-organization: *
a. Place the 'Accounts' directory inside 'C:\Users\Or\Dropbox'. *
b. Refer all the projects to this location. *
c. Make sure that after each path change the project still works. *
-Check if the logic still works. Make the fixes if needed. *
15. Copy the 'updateCount' function (if exists) from 'sender' project. *
16. Add to 'INSTRUCTIONS.md' how the console log should be (take the specific sentence from other project) + *
   /* cSpell:disable */ before the console log status example. *
18. Place this in all 'ToDo' documents of all the projects. *
16. Add 'INSTRUCTIONS.md' file if it does not exist (add it to files in package.json). *
17. Add to 'INSTRUCTIONS.md' how the console log should be (take the specific sentence from other project) + *
 /* cSpell:disable */ before the console log status example. *
19. Copy the 'updateCount' function (if exists) from 'sender' project. *
20. Update settings.json:
"formatFiles.excludePattern": "**/node_modules,**/.vscode,**/dist,**/dist/**,**/.chrome,**/misc,**/misc/**,**/sources,**/sources/**". *
21. Add to .eslintignore, .gitignore, .npmignore files: *
# Sources. *
sources/ *
/sources *
sources *
-Remove comments. *
-Fix all spell mistakes via Gmail. *
-Clear all the tasks from here. *
-Verify all works well. *
-In all the maintenance projects: *
-Update packages + re-create package.json files. *
01. Update the 'REMEMBER' section of this document. *
02. ' all the outcome of the crawling will be created' comment should be updated. *
03. Add to package.json file the 'INSTRUCTIONS.md' key in the files section (if it exists in the project). *
04. In the initiate.service - const { Mode, ScriptType } = require('../../core/enums/files/system.enum'); - Need to change to ../../core/enums. *
05. Check if async copyDirectory( is not with line break. *
06. Fix createDirectory - No need for await in createSessionDirectory method. *
07. 'Validate internet connection works.' => 'Validate that the internet connection works.' *
08. '...sending emails processes.' in udemy-courses project. *
09. Rename the function 'getFileData' to 'getJsonFileData'. *
10. Copy the logic of 'this.updateStatus' to all change statuses in the main script file. *
11. On udemy-courses project, change the 'validate' and 'compare' functions to 'validateFields' and 'compareCourses'. *
12. On udemy-courses project, change 'isExpectedFilled' to 'isFilledExpected'. *
13. Change all function names that return true/false to 'isValidXXX' in validationUtils. *
14. In all places change to use isExists instead of .length > 0 or .length <= 0. *
15. Copy the logic of retry on check internet connection in all relevant projects (like in the udemy courses project). *
16. Add to 'INSTRUCTIONS.md' file how the console log should be (take the specific sentence from another project). *
18. Place this in all 'ToDo' documents of all the projects. *
-Bring back production to true in settings.js. *
-Remove all comments. *
-Re-format error numbers + last_index.txt file. *
-Fix all spell mistakes. *
-Format all files. *
-Upload to GitHub. *
-Backup iOmega. *
-Clear complete tasks. *
-Update packages + re-create package.json files. *
-Change the timeUtils in settings.js to accept a function. *
-Fix issue with PostId: ## in case of course list type course. *
-Make sure that courses list course property 'isFree' will be updated if the coupon exists or not. *
-Fix COURSES_DATES_VALUE: [object Object] in the confirmation panel in case of a range. Built it to fit all cases. *
-Fix 'Dates: /8 ' - Not working as expected. *
-Add inner settings for long run - Take the current day - 1 day (add inner settings validations like in crawler project). *
-Check exceeded course's logic - Maximum limit per day. If 2 days, maximum X 2. *
-In the line of 'this.coursesDataModel.coursesList.map(c => c.status === CourseStatus.CREATE).length <= 0)' - *
 Change it to filter (like in 'spam-revenge' project) + use isExists instead of .length <= 0. *
-In all places change to use isExists instead of .length > 0 or .length <= 0. *
-Update packages. *
-Update packages again. *
-Add logic to detect single Udemy link + same logic as today: *
-Single redirect course example: https://idownloadcoupon.com/2021/02/26/100-off-client-care-and-consultation/ *
-Single direct course example: https://idownloadcoupon.com/2021/02/19/free-microsoft-powerpoint/ *
-Courses list example: https://idownloadcoupon.com/2021/02/26/free-udemy-courses-list-12-15-2020/ *
-Fix Udemy links that are empty in the update method. *
-Add single and courses count to the console status log. *
-Keep update the 'Current Date' in the console status log. *
-Change the 'Dates Count' to be 1/1 or 1/7 and keep it updated. *
-Check the order of the parameters in the initiate.service.js (Titles order identical to settings.js order). *
-Add script name to tests and add validation for empty script name in initiate.service.js (copy from sender project). *
-Go over timeUtils and make sure all local 'this.getDay' are being used, and not 'date.getDate()' for example. *
-Fix comment in settings.js 'interval to run to calculate' => 'interval to calculate'. *
-Add index.js to 'configurations' directory and replace in all places. *
-Fix comment:         // Get the backup title from the console.s *
-Fix all README.me + package.json from 'create-react-up' to 'create-react-app'. *
-Remove comments. *
-Verify all works as expected. *
-Change all ect => etc - In all projects. *
-Verify package.json project name. *
-Change all README.md files to the title of the project as first line (Only one #). *
-Change from 'Start to be built' to 'Built in', and remove space lines, and the '-Goal:', *
and remove the 'This project was bootstrapped with [Create React App] *
(https://github.com/facebook/create-react-app).' line under to the description *
with line space,  all fixes in README.md. *
-Re-format all error numbers + last_index.txt file. *
-Clear all comments. *
-Fix all misspells in all TXT files. *
-Format all documents.
-Move all complete tasks to complete_tasks.txt. *
-Verify all works well + delete all unneeded dist. *
-Upload to GitHub. *
-Backup iOmega. *
-Update Packages. *
-Update packages. *
-Remove the check on the empty URL in the purchase method. *
-Fix the bug that if not Udemy URL, change it to new counter 'invalid Udemy URL'. *
-Add new counter for course not exists (other counter from
limit access and URL not exists): https://www.udemy.com/course/local-lead-generation-rank-and-rent-definitive-guide/?couponCode=RANKANDRENT2021 *
-This is limited access: https://www.udemy.com/course/draft/3526008/?couponCode=56191CDC04DF350FE15A *
-Clean all comments. *
-Rewrite error numbers. *
-Remove all 'debugger' keywords. *
-Fix TXT files spell mistakes. *
-Update packages again. *
-Format all files. *
-Upload to GitHub. *
-Move all complete tasks from here to complete_tasks.txt. *
-Fix bug with taking no udemy URL - Canceled. *
-Make sure all comments end with . *
-Update puppeteer package again + verify all works good. *
-Rewrite error numbers. *
-Format all files. *
-Run on production to verify all works well. *
-Fix bug with single date log name. *
-Copy the .gitignore and .npmignore from one of the projects and delete the misc/backup directory from git: *
git rm -r one-of-the-directories // This deletes from filesystem. *
-Upload to GitHub. *
-Move all complete tasks from here to complete_tasks.txt. *
-Clean all comments again. *
  -Remove all 'debugger' keywords. *  
-Fix TXT files spell mistakes. *
-Fix all spell mistakes in all TXT files. *
-Fix spell mistakes in all txt files. *
-Re-check all imports in the entire project (check for duplicate imports paths). *
-Sort alphabetically all imports: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils. *
-Sort alphabetically by https://alphabetizer.flap.tv/. *
-Replace all 'let' to 'const' and where no bugs - change it. *
-Add 'Misc.' section to gitignore and npmignore files (include tasks txt files + backups directory). *
-Check for empty lines inside functions / models with regular expression: ^\s*$. *
-Remove all unused files, functions, and variables. *
-Clean all comments. *
-Make sure spaces in all files between bottom, need to fix cases like this: *
} *
module.exports *
} *
export default *
-Update packages npm outdated --depth 9999. *
-Fix change in the IDC site of specific udemy links. *
-Update packages + re-create package.json file. *
-Add logic to take a single date, array of dates, or range of dates, and the daily limit will be on each date. *
-Only one date functionality allowed: single date, array of dates, or range of dates (add a parameter on settings.js of the type and the value). *
-The structure on the console status will be: *
[DATE] Type: SINGLE/ARRAY/RANGE | Value: #value from settings.js# | dates count: 23 | Current Date: 24/01/2021 *
-Add retry on courses that failed to be purchased or got 'purchase error', with new status of *
'RETRY'. In the and take all the retries status courses and retry to purchase each of them (maximum tries 5 from settings.js). *
-Add another logic of take dates according to the missing on misc directory until now - Canceled. *
-Add logic that if [NAME] does not exist - Take the name from udemy URL course (split the `-` and Capital each word). *
-Fix bug of not waiting for courses lists to finish when scanning courses. *
-Add the maximum pages that exist in the session to the console status. *
-Update packages + Re-create package-lock.json. *
-Fix the status on the console line: Status: PURCHASE many times is actually ALREADY_PURCHASE. Fix all statuses. *
-Change the log file names with the word '-method' in the end. *
-Add another log file for purchased courses only - Canceled - Already exists. *
-Add the mode parameter from the settings.js file + add 'SILENT' mode. *
-Fix Publish Date: 2021/001/09 | *
-Add retry on validate the coupons URL, take a number from settings.js and delay from settings.js. *
-Add *
  '--disable-background-timer-throttling', *
  '--disable-backgrounding-occluded-windows', *
  '--disable-renderer-backgrounding' *
to solve issues of hand while not in focus. *
-Update packages. *
-Fix description in package.json + README.MD + re-create package.json-lock file. *
-Take the 'initiate service' from the 'crawler' project. *
-Check if comments of all backup parameters in settings.js are relevant to this project. *
-Add .catch(e => console.log(e)); to all (async () => { - Take the logic from 'crawler' project. *
-Take backup.logic.js file from 'mbox-crawler' project. *
-Change all places from 'exports = {' to 'module.exports = {'. *
-Change all places from '../settings' to '../settings/settings'. *
-Fix issue that script not working anymore - Canceled. *
-Fix unneeded formats with: "formatFiles.excludePattern": "**'/node_modules,**'/.vscode,**'/dist/'**,**'/.chrome,**'/misc". *
-Add 'Complete + canceled tasks: *
==========================' to complete_tasks.txt. *
-In .eslintrc file - set "no-unused-vars": 1. *
-Add .eslintignore file from 'crawler' project. *
-Add .jsbeautifyrc file from 'crawler' project. *
-Take updated 'Misc' section from 'crawler' project for npmignore and gitignore files. *
-Change the maximum purchase courses to 3000. *
-Fix bug: not showing data: *
===[NAME] Persuasive Writing Ft. Two Forbes Contributors & Copywriters=== *
===[COURSE URL] https://idownloadcoupon.com/2021/01/10/free-udemy-courses-list-12-15-2020/=== *
===[UDEMY URL] https://www.udemy.com/course/persuasive-writing-copywriting/?couponCode=YOUACCEL34694=== *
===[RESULT] Time: ## | Result: ##=== *
-Copy the logic of validation of isDirectory in the 'initiate service' from 'crawler' project. *
-Remove all comments. *
-Fix TXT files spell mistakes. *
-Fix all spell mistakes in all TXT files. *
-Remove all unused files, functions, and variables. *
-Rewrite error numbers. *
-Remove all 'debugger' keywords. *  
-Make sure all comments end with . *
-Format all files. *
-Move all completed tasks to complete tasks text file. *
-Delete old project from GitHub + Re-upload GitHub. *
-Delete from developer-Story in StackOverFlow + Re-add it. *
-All the last course needs to be removed from console status when finished - Canceled. *
===[SETTINGS] Environment: PRODUCTION | Method: PURCHASE COURSES | Query Date: 2020/12/21 | Specific Page Number: ## | Is Keywords Filter: false=== *
===[GENERAL] Time: 00.02:04:54 [-] | Total Price Purchase: ₪30,363.00 | Course: 409/409 (100.00%) | Courses Count: 450 | Status: LOGOUT=== *
===[ACCOUNT] Email: orassayag@gmail.com | Password: *******************=== *
===[PROCESS1] Purchase: ✅  69 | Fail: ❌  0 | Filter: 0 | Missing Field: 0 | Unexpected Field: 0 | Duplicate: 21=== *
===[PROCESS2] Create Update Error: 0 | Empty URL: 1 | Not Exists: 2 | Limit Access: 20 | Suggestions List: 2 | Private: 1=== *
===[PROCESS3] Already Purchase: 73 | Course Price Not Free: 218 | Enroll Not Exists: 0=== *
===[PROCESS4] Checkout Price Not Exists: 1 | Checkout Price Not Free: 0 | Purchase Error: 1=== *
===[DATA1] Creation: 21/12/2020 19:35:15 | Id: 409 | Post Id: ## | Status: ALREADY PURCHASE=== *
===[DATA2] Publish Date: 2020/12/21 | Page Number: 7 | Index Page Number: 0=== *
===[DATA3] Is Free: false | Price Display: ## | Coupon Key: 76CC6BA6766C9CB8FFBF | Type: COURSES LIST=== *
===[ERRORS] Create Update Error In A Row: 0 | Purchase Error In A Row: 0=== *
===[NAME] Microsoft Excel -Basic Excel/ Advanced Excel Formulas=== *
===[COURSE URL] https://idownloadcoupon.com/2020/12/21/free-30-best-udemy-courses-100-off-promo-code-deals-discount-friday-august-7-2020-reviews-coupons/=== *
===[UDEMY URL] https://www.udemy.com/course/microsoft-excel-basic-excel-advanced-excel-formulas/?couponCode=76CC6BA6766C9CB8FFBF=== *
===[RESULT] Time: 21/12/2020 21:35:19 | Result: The course already purchased in the past. No price label exists.=== *
===EXIT: FINISH=== *
-Fix bug of undefined index index page number. *
-PostId on console convert to string. *
-Fix ':' in 'Time' in Result - Remove it. *
-Make sure that if ctrl+c - The program will exit. *
-Make sure then the browser is closed - The program will exit. *
-Add original index for update-courses step. *
-Add final timeout to settings.js. *
-Final status change to FINISH (not Status: LOGOUT). *
-Add environment: PRODUCTION/DEVELOPMENT (in production take account original JSON, development take account development JSON). *
-Add to console status: Course: 50 | Courses Count: 450. *
-Change the misc directory structure like the 'crawler' project (misc/documents + add complete_tasks.txt). *
-Copy the logic of backups from the 'crawler' project. *
-Copy the logic of 'time utils' from the 'crawler' project. *
-Add 'validateScriptType' in the 'initiate service' from the 'crawl' project. *
-Add 	constructor() { *
		this.scriptType = null; *
	} *
In the initiateService.js *
-Refactor time.utils.js like in the 'crawler' project. *
-Convert all sandbox and udemy sessions on 'ScriptType' enum to 'Test' and change it in all places. *
-Add validation for the script type in the 'initiate service'. *
-Add to total price purchase, only after successful purchase. *
-Change in all places from 'GET_COURSES' to 'CREATE_COURSES'. *
-Add another method to all places - 'UPDATE COURSES' (logs, console, all). *
-Add new mode, after GET_COURSES, add another status of UPDATE COURSES. *
-Change the logic to log each course in each step. *
-Try to replace jsDOM with exposeFunction: https://pptr.dev/#?product=Puppeteer&version=v5.5.0&show=api-pageexposefunctionname-puppeteerfunction - Canceled. *
-Fix Total Price Purchase: ₪30363.00 to be with comma. *
-Fix bug with error in a row caused to ignore courses list page. *
-Fix bug with logs parameter undefined. *
-Check https://pub.dev/documentation/puppeteer/latest/puppeteer/JsHandle-class.html to replace jsdom - Not working. *
-Add the account name to the confirmation message. *
-Add to the log console the account username + ******** of the password length. *
-Add to the log directory name the username of the Udemy account. *
-Bring back the account.json. *
-Upload to GitHub. *
-Go all over the project and change many to single, also in the comments (services => service | LOGS => LOG). *
-Remove all unused files, functions, and variables. *
-Rewrite INSTRUCTIONS.md + README.md. *
-Rewrite error numbers. *
-Remove all comments. *
  -Remove all 'debugger' keywords. *  
-Make sure all comments end with . *
-Fix all spell mistakes in all TXT files. *
-Format all files. *
-Test a few sessions from different days (terminal | browser). *
-Fix bug with price: Total Price Purchase: ₪5468.599999999999. Fix to 2 numbers after dot. *
-Add private course: https://www.udemy.com/course/html-the-complete-html-practice-test-linkedin-assessment/?couponCode=CODINGINTERVIEW *
-Add option to fetch only courses with specific keys (check the keys in the udemyURL lowercase). *
-Add the logic of 'totalPriceNumber'. *
-Change all console.log to logUtils.log. *
-Convert all the 'exit' methods in all the services to be called only from the purchase.logic.js file, *
where it will be a graceful exit with closing all the services. *
-Change the console message of confirmation: 'OK to run? (y = yes)' + refactor function logic. *
-Test a few sessions from different days - Canceled. *
-Add confirmation step. *
-Re-plan the console status structure. *
-Fix the log courses status logic + write comments in other projects about it. *
-Do the console status. *
============================ *
-Add status console line with the following structure: *
===[SETTINGS] Method: GET COURSES/PURCHASE COURSES | Query Date: 2020/12/06 | Specific Page Number: ## | Is Keywords Filter: false=== *
===[GENERAL] Time: 00.05:16:58 [-] | Total Price Purchase: ₪5,450 | Course: 2/348 (48%) | Status: GET COURSES/VALIDATE/PAUSE/NO URLS/LOGIN/ADD CART/CHECKOUT/SUCCESS=== *
===[PROCESS1] Purchase: ✅ 0 | Fail: ❌ 0 | Filter: 0 | Missing Field: 0 | Unexpected Field: 0 | Duplicate: 0=== *
===[PROCESS2] Get Error: 0 | Empty URL: 0 | Not Exists: 0 | Limit Access: 0 | Suggestions List: 0 | Already Purchase: 0=== *
===[PROCESS3] Course Price Not Free: 0 | Enroll Not Exists: 0 | Checkout Price Not Exists: 0=== *
===[PROCESS4] Checkout Price Not Free: 0 | Purchase Error: 0=== *
===[DATA1] Creation: 12/12/2020 18:02:00 | Id: 33444 | Post Id: 4323 | Status: CREATE/INVALID/ERROR/NOT_EXISTS/VALIDATE/CART/PURCHASE_FAIL/PURCHASE *
===[DATA2] Publish Date: 13/12/2020 | Page Number: 3 | Index Page Number: 4=== *
===[DATA3] Is Free: false | Price Display: ₪450.00 | Coupon Key: A1C8F6566F1EA8D253AC | Type: SINGLE/COURSES LIST=== *
===[ERRORS] Get Error In A Row: 0 | Purchase Error In A Row: 0=== *
===[NAME] Learn How to Setup Online Exports Business Instantly (cut it to maximum characters)=== *
===[COURSE URL] https://idownloadcoupon.com/2020/12/17/amazon-aws-sysops-administrator-associate-certificate-tests/ (cut it to maximum characters)=== *
===[UDEMY URL] https://www.udemy.com/course/learn-python-coding-from-basic-beginning-to-master/?couponCode=DECEMBER-BONANZA (cut it to maximum characters)=== *
===[RESULT] Time: 12/12/2020 18:02:00 | Result: The course has been purchased successfully. (cut it to maximum characters)=== *
-Add to the log and the console the total price number. *
============================ *
-Insert the course's logic into the purchase courses. *
-Between each course purchase, wait 5 seconds. *
-Fix bug with maximum pages equal to 1. *
-Add the full logic and test full session (loop on all the courses that are in the status of CREATE) - Canceled. *
-Test another full session (loop on all the courses that are in the status of CREATE) - Canceled. *
-Insert all parameters to settings.js. *
-Convert all checks of (x && x.length > 0) to isExists. *
-Add try catch on login and logout and in case of exception exit gracefully and close browser. *
-Add try catch on each course purchase, and if an exception is thrown, add error object to details and change to 'ERROR' status, *
And redirect back to udemyBaseURL and wait 5 seconds. *
-Add error in a row logic. *
-Add logic for error in a row (5 from settings.js) to exit the program. *
-Log the purchased courses - Log the entire object. *
-Fix the free courses bug. *
-Add logic for test session. Loop on specific URLS and try to purchase them. *
-Add specific page on specific date logic. *
-Add the c:/puppeteer directory to the validation paths, - Canceled. *
 and delete all the content at the end of the process, in each exit process. - Canceled. *
-Add limit to purchase courses. *
-Separate the existing function to a single purchase course function. *
-Test array of 2 courses. *
-Test array of 5 courses - Canceled. *
-Loop for the next courses - Canceled. *
-Handle maximum login requests. *
-Do logic of single course purchase, include all logics and cases. *
-Start to loop on the URLs. Delay of random 3-4 between processes. *
-For each page, wait 5 seconds (settings.js) (until the 'Add to cart' button will become clickable). *
-Check that the button with the class 'udlite-heading-md add-to-cart', contains the value 'Add to cart'. *
-If it contains the value 'Go to cart' or 'Go to course' or not 'Add to cart', continue to the next course. *
-Look for element 'data-purpose="course-price-text"'. Inside it looks for '<span>Free</span>'. *
-If exists, continue. *
-Go to the element 'data-purpose="course-old-price-text"', search for span with the value of '₪'. *
 This is the price. Get it, separate it to a numeric, not just text. *
-Not a mandatory step. If not found, continue anyway. *
-Click on the button that contains the class 'udlite-heading-md add-to-cart' - Canceled. *
-If not, continue to the next course - Canceled. *
-Wait for an element with the id of 'cart-success-title' to exist in the DOM - Canceled. *
-Continue to the next course - Canceled. *
-Each X courses, go to the cart and purchase - Canceled. *
-Go to https://www.udemy.com/cart/checkout, and wait for 5 seconds (settings.js) - Canceled. *
-Change in logic: Each course will be enrolled immediately. *
-Search for the element with 'data-purpose="total-price"' and make sure the span inside it contains '₪0.00'. *
-If it's not the case, continue to the next course. *
-Search the first element of class 'ellipsis btn btn-lg btn-primary btn-block' and click it. *
-Wait to be redirected to a page contains 'https://www.udemy.com/cart/success/'. *
-After successful cart purchase, do a logout process - Canceled. *
-Build all the logic of running the project after downloading it from GitHub. *
-Create a dummy account on udemy. *
-Fill the json file with the dummy account. *
-Build the logic to take the account from an external json file. *
-Build example json file on the misc directory. *
-With puppeter.js go to https://www.udemy.com/join/login-popup/. *
-Like the UdemyData with all elements, do the same (add to existing CoursesData object). *
-Login with given credentials from external account.json file. *
('id_email' element, 'id_password' password element), and click on the 'submit-id-submit' button. *
-Wait for redirect to Udemy main page, and validate login if 'data-purpose="header-login"' no longer exists. *
-Do the logout process. *
-Make sure to add in settings.js parameter of user-agent. If it's empty, take a random one - Canceled. *
-With puppeter.js go to https://idownloadcoupon.com/. *
-Scan the URL by the current date. For example, https://idownloadcoupon.com/2020/12/06/. *
-If no URLs ('Page not found'), exit the program. *
-Loop on each course item: the id starts with 'post-' for example, 'post-18943'. *
-For each item, get the element 'grid-tit' (it's h2), and get the URL, and the publish date (class="fa fa-clock-o" element, example: 8 Dec , 2020). *
-Get also the title of the course. *
-Get the URL and store it in the object. *
-Add variable on settings.js of the date to take the courses + Variable of dynamic date. If empty, take the today date. *
-Get each URL - Detect if the page is a 'courses list' page or a single course page *
 (if https://www.udemy.com URLs found - it's a 'courses list' page. If not, and 'deeplink' href found, it's a single course page). *
-If it's a single course page - Get all href, and search for the one that starts with 'https://click.linksynergy.com/deeplink'. *
-If neither of them is found, continue to the next page. *
-Extract the Udemy URL from the href, include the coupon code. *
-The structure of the URL should look like this: 'https://www.udemy.com/course/learn-how-to-setup-online-exports-business-instantly/?couponCode=A1C8F6566F1EA8D253AC' *
-If it's a URL from the 'courses list' page, just copy the URL, and extract the coupon from it (take also the title - 'course_title' element). *
-After finish get the URLs from the current page, go to the next page by: https://idownloadcoupon.com/2020/12/06/page/2/ *
-When you get to 'Page not found', the get part is over. *
-Finalize step: Loop on all courses and: *
-If no udemyURL found - Mark status as MISSING_URL. *
-If the udemyURL is invalid - Mark status as INVALID. *
-Do a comperation step, to make sure no duplicate course will be inserted. *
-Replace all 'sleep' in here to 'await page.waitForTimeout()' - Canceled. *
-Log the entire object - Post id (if exists), course name, page URL, Udemy URL, course coupon. *
-Add all log flags + logic in code. *
-Add method flags + logic in code (add logic that if get courses not active the purchase courses will not work and exit). *
-Change all places from 'pageURL' to 'courseURL'. *
-Add validation of free course with coupon. *
-For this method, log all courses that are not in CREATED status to a separated file. *
-Add log publish date to the log file names. *
-Test this step on random dates (10 dates in the past 10 days). *
FULL MESSAGE: *
============ *
Time: 15:05:43 | Id: 334 | Creation Date Time: 12/08/2020 15:04:34 | Page Number: 2 | Publish Date: 2020/12/08 *
Name: Time Management for Professionals *
Type: COURSES LIST | Is Free: false | Coupon Key: BD1F9BF485081A1F438B | Status: CREATE *
Page URL: https://idownloadcoupon.com/2020/12/08/free-udemy-courses-list-9-18-2020/ *
Udemy URL: https://www.udemy.com/course/time-management-for-professionals/?couponCode=BD1F9BF485081A1F438B *
============ *
-Remove all jsdom from the project, and use: *
 const result = await page.evaluate(() => { *
    return document.querySelectorAll('.footer-tags a').length *
  }) - Canceled. *
-The main goal of the application is to add Udemy free courses, based on coupons, automatically to specific accounts. *
-The application will be separated to 2 main parts: *
1. Get courses URLs with coupons. *
2. Go to Udemy and one after one, insert the courses to cart, and purchase them. *
-The second part contains several parts: *
1. Login to the system. *
2. Purchase X courses (settings.js number). *
3. Each X courses go and purchase, and continue to the next courses. *
-Add folders structure. *
-Add project general structure. *
-Add backup logic. *
-Validate that https://idownloadcoupon.com/ is online. *
-Validate that https://www.udemy.com/ is online. *
-Object - Course: *
-Id, Price, Name, Type (single/coursesList), Page URL, Udemy URL, Coupon Key, Status. *
-(remove the [100% OFF] in the start if exists) *  